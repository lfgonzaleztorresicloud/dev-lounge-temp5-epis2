// This unit is autogenerated. Do not edit it manually.
// Source: http://localhost:8080/Empleados
// Date: 05/06/2025 12:37:43 p. m.

unit uEmpleadosClass;

interface

uses
  System.Classes, REST.Json.Types, System.JSON;

type
  [JsonSerialize(jmAllPubProps)]
  TData = class(TPersistent)
  private
    FEmpNo: Integer;
    FFirstName: string;
    FLastName: string;
    FPhoneExt: string;
    FHireDate: string;
    FJobCode: string;
    FJobGrade: Integer;
    FJobCountry: string;
    FDeptNo: Integer;
    FSalary: Double;
  public
    class function FromJSON(const AValue: TJSONValue): TData; overload; static;
    class function FromJSON(const AValue: string): TData; overload; static;
    function ToJSONObject: TJSONValue;
    function ToJSONString: string;
    property EmpNo: Integer read FEmpNo write FEmpNo;
    property FirstName: string read FFirstName write FFirstName;
    property LastName: string read FLastName write FLastName;
    property PhoneExt: string read FPhoneExt write FPhoneExt;
    property HireDate: string read FHireDate write FHireDate;
    property JobCode: string read FJobCode write FJobCode;
    property JobGrade: Integer read FJobGrade write FJobGrade;
    property JobCountry: string read FJobCountry write FJobCountry;
    property DeptNo: Integer read FDeptNo write FDeptNo;
    property Salary: Double read FSalary write FSalary;
  end;

  [JsonSerialize(jmAllPubProps)]
  TDataArray = class(TPersistent)
  private
    FDataset: TArray<TData>;
  public
    destructor Destroy; override;
    class function FromJSON(const AValue: TJSONArray): TDataArray; overload; static;
    class function FromJSON(const AValue: string): TDataArray; overload; static;
    function ToJSONArray: TJSONArray;
    function ToJSONString: string;
    property Dataset: TArray<TData> read FDataset write FDataset;
  end;

implementation

uses
  System.Generics.Collections;

class function TData.FromJSON(const AValue: TJSONValue): TData;
begin
  Result := TJSONMapper<TData>.Default.FromObject(AValue);
end;

class function TData.FromJSON(const AValue: string): TData;
begin
  Result := TJSONMapper<TData>.Default.FromObject(AValue);
end;

function TData.ToJSONObject: TJSONValue;
begin
  Result := TJSONMapper<TData>.Default.ToObject(Self);
end;

function TData.ToJSONString: string;
begin
  Result := TJSONMapper<TData>.Default.ToString(Self);
end;

destructor TDataArray.Destroy;
begin
  TArray.FreeValues<TData>(FDataset);
  inherited Destroy;
end;

class function TDataArray.FromJSON(const AValue: TJSONArray): TDataArray;
begin
  var LArr := TJSONMapper<TData>.Default.FromArray(AValue);
  Result := TDataArray.Create;
  Result.Dataset := LArr;
end;

class function TDataArray.FromJSON(const AValue: string): TDataArray;
begin
  var LArr := TJSONMapper<TData>.Default.FromArray(AValue);
  Result := TDataArray.Create;
  Result.Dataset := LArr;
end;

function TDataArray.ToJSONArray: TJSONArray;
begin
  Result := TJSONMapper<TData>.Default.ToArray(Dataset);
end;

function TDataArray.ToJSONString: string;
begin
  Result := TJSONMapper<TData>.Default.ToString(Dataset);
end;

initialization

  RegisterClass(TData);
  RegisterClass(TDataArray);

end.
