// ************************************************************************ //
// WARNING
// -------
// The types declared in this file were generated from data read from a
// Type Library. If this type library is explicitly or indirectly (via
// another type library referring to this type library) re-imported, or the
// 'Refresh' command of the Type Library Editor activated while editing the
// Type Library, the contents of this file will be regenerated and all
// manual modifications will be lost.
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 6/21/2025 11:11:19 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Developer\Embarcadero Event\DemoCom+\DemoCOMCpp (1)
// LIBID: {A4FD3A3A-935A-4077-8ED8-3FB52820FE16}
// LCID: 0
// Helpfile:
// HelpString:
// DepndLst:
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   DemoCOMCpp_TLBH
#define   DemoCOMCpp_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Democomcpp_tlb
{

// *********************************************************************//
// HelpString:
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:
//   Type Libraries     : LIBID_xxxx
//   CoClasses          : CLSID_xxxx
//   DISPInterfaces     : DIID_xxxx
//   Non-DISP interfaces: IID_xxxx
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DemoCOMCpp;
extern __declspec (package) const GUID IID_IEmployee;
extern __declspec (package) const GUID CLSID_Employee;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary
// *********************************************************************//
interface DECLSPEC_UUID("{6EB54BF8-EEFF-4A74-8874-9E72CCE85607}") IEmployee;
typedef TComInterface<IEmployee, &IID_IEmployee> IEmployeePtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library
// (NOTE: Here we map each CoClass to its Default Interface)
//
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this
// TypeLibrary. It simplifies the updating of macros when CoClass name
// change.
// *********************************************************************//
typedef IEmployee Employee;
typedef IEmployeePtr EmployeePtr;

#define LIBID_OF_Employee (&LIBID_DemoCOMCpp)
// *********************************************************************//
// Interface: IEmployee
// Flags:     (256) OleAutomation
// GUID:      {6EB54BF8-EEFF-4A74-8874-9E72CCE85607}
// *********************************************************************//
interface IEmployee  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetEmployee(BSTR AId/*[in]*/, BSTR* AData/*[out]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE GetEmployees(BSTR* AData/*[out]*/) = 0; // [102]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIEmployee
// Interface: IEmployee
// *********************************************************************//
template <class T /* IEmployee */ >
class TCOMIEmployeeT : public TComInterface<IEmployee>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIEmployeeT() {}
  TCOMIEmployeeT(IEmployee *intf, bool addRef = false) : TComInterface<IEmployee>(intf, addRef) {}
  TCOMIEmployeeT(const TCOMIEmployeeT& src) : TComInterface<IEmployee>(src) {}
  TCOMIEmployeeT& operator=(const TCOMIEmployeeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall GetEmployee(BSTR AId/*[in]*/, BSTR* AData/*[out]*/);
  HRESULT         __fastcall GetEmployees(BSTR* AData/*[out]*/);

};
typedef TCOMIEmployeeT<IEmployee> TCOMIEmployee;

// *********************************************************************//
// SmartIntf: TCOMIEmployee
// Interface: IEmployee
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIEmployeeT<T>::GetEmployee(BSTR AId/*[in]*/, BSTR* AData/*[out]*/)
{
  return (*this)->GetEmployee(AId, AData);
}

template <class T> HRESULT __fastcall
TCOMIEmployeeT<T>::GetEmployees(BSTR* AData/*[out]*/)
{
  return (*this)->GetEmployees(AData);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that
// provide static Create() and CreateRemote(LPWSTR machineName) methods
// for creating an instance of an exposed object. These functions can
// be used by client wishing to automate CoClasses exposed by this
// typelibrary.
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Employee
// Interface: TCOMIEmployee
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIEmployee, IEmployee, &CLSID_Employee, &IID_IEmployee> CoEmployee;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Democomcpp_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Democomcpp_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // DemoCOMCpp_TLBH

