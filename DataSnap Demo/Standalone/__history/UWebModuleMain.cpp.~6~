
//---------------------------------------------------------------------------
#include "UWebModuleMain.h"
#include "UServerMethod.h"
#include "UServerContainer.h"
#include <Web.WebReq.hpp>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

TComponentClass WebModuleClass = __classid(TWebModule2);
//---------------------------------------------------------------------------
__fastcall TWebModule2::TWebModule2(TComponent* Owner)
	: TWebModule(Owner)
{
}
//---------------------------------------------------------------------------
//----------------------------------------------------------------------------
void __fastcall TWebModule2::WebModule2DefaultHandlerAction(TObject *Sender, TWebRequest *Request,
		  TWebResponse *Response, bool &Handled)
{
  Response->Content =
    "<html>"
    "<head><title>DataSnap Server</title></head>"
    "<body>DataSnap Server</body>"
    "</html>";
}
//---------------------------------------------------------------------------
void __fastcall TWebModule2::WebModuleCreate(TObject *Sender)
{
	DSHTTPWebDispatcher1->Server = DSServer();
	if (DSServer()->Started)
	{
		DSHTTPWebDispatcher1->DbxContext = DSServer()->DbxContext;
		DSHTTPWebDispatcher1->Start();
	}
}

//---------------------------------------------------------------------------
static void freeWebModules()
{
	FreeWebModules();
}
#pragma exit freeWebModules 64

void __fastcall TWebModule2::DSHTTPWebDispatcher1FormatResult(TObject *Sender,
	TJSONValue *&ResultVal,TDBXCommand * const Command, bool &Handled)
{
	try {
	// Almacenamos lo que viene en ResultVal
	auto LResultVal = ResultVal;
	// Asignamos a Resulval el contenido la posicion 0 del JSONArray
	ResultVal = static_cast<TJSONArray*>(LResultVal)->Remove(0);
	}
	__finally {
		// Liberamos la memoria de LResultVal
		delete LResultVal;
		// Permitimos que sea manejado el Resultado
		Handled = true;
    }
}
//---------------------------------------------------------------------------

