//---------------------------------------------------------------------------

#ifndef UDmMainH
#define UDmMainH
//---------------------------------------------------------------------------
#include <System.Classes.hpp>
#include <Data.DB.hpp>
#include <FireDAC.Comp.Client.hpp>
#include <FireDAC.Phys.hpp>
#include <FireDAC.Phys.IB.hpp>
#include <FireDAC.Phys.IBBase.hpp>
#include <FireDAC.Phys.IBDef.hpp>
#include <FireDAC.Phys.Intf.hpp>
#include <FireDAC.Stan.Async.hpp>
#include <FireDAC.Stan.Def.hpp>
#include <FireDAC.Stan.Error.hpp>
#include <FireDAC.Stan.Intf.hpp>
#include <FireDAC.Stan.Option.hpp>
#include <FireDAC.Stan.Pool.hpp>
#include <FireDAC.UI.Intf.hpp>
#include <FireDAC.VCLUI.Wait.hpp>
#include <FireDAC.Comp.UI.hpp>
#include <FireDAC.ConsoleUI.Wait.hpp>
#include <FireDAC.DApt.hpp>
#include <System.JSON.hpp>
#include <memory>
//---------------------------------------------------------------------------
class TDmMain : public TDataModule
{
__published:	// IDE-managed Components
	TFDConnection *connEmployees;
	TFDPhysIBDriverLink *FDPhysIBDriverLink1;
	TFDGUIxWaitCursor *FDGUIxWaitCursor1;
private:	// User declarations
public:		// User declarations
	__fastcall TDmMain(TComponent* Owner);
	// Metodos para obtener la info necesario para los metodos anonimos
	System::Json::TJSONObject * GetEmployeeById(const uint32_t AId);
	// Obtener todos los empleados
	System::Json::TJSONArray * GetAllEmployees(void);
	// Obtener el Pais pasado el nombre
	System::Json::TJSONObject * GetCountryByName(const System::UnicodeString AName);
	// Obtener todos los paises
	System::Json::TJSONArray * GetAllCountries(void);
	// Adicionar un pais nuevo
	bool AddCountry(const System::UnicodeString AName, const System::UnicodeString ACurrency);
};
//---------------------------------------------------------------------------
extern PACKAGE TDmMain *DmMain;
//---------------------------------------------------------------------------
#endif
